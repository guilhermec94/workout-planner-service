/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.workout_planner_service.infrastructure.adapters.inbound.rest.gen;

import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.CategoryDTO;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.ErrorDTO;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.ExerciseDTO;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.ExerciseInstructionDTO;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.ExerciseTypeDTO;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.GetExerciseInstructions200Response;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.SortOrderDTO;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-11T17:20:05.992941900Z[Europe/Lisbon]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "exercises", description = "the exercises API")
public interface ExercisesApi {

    default ExercisesApiDelegate getDelegate() {
        return new ExercisesApiDelegate() {};
    }

    /**
     * POST /exercises/categories : Create a new category
     *
     * @param categoryDTO Category payload (optional)
     * @return The newly created category (status code 201)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "createCategory",
        summary = "Create a new category",
        responses = {
            @ApiResponse(responseCode = "201", description = "The newly created category"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exercises/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createCategory(
        @Parameter(name = "CategoryDTO", description = "Category payload") @Valid @RequestBody(required = false) CategoryDTO categoryDTO
    ) {
        return getDelegate().createCategory(categoryDTO);
    }


    /**
     * POST /exercises : Create a new exercise
     *
     * @param exerciseDTO Exercise payload (optional)
     * @return The newly created exercise (status code 201)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "createExercise",
        summary = "Create a new exercise",
        responses = {
            @ApiResponse(responseCode = "201", description = "The newly created exercise"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exercises",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createExercise(
        @Parameter(name = "ExerciseDTO", description = "Exercise payload") @Valid @RequestBody(required = false) ExerciseDTO exerciseDTO
    ) {
        return getDelegate().createExercise(exerciseDTO);
    }


    /**
     * POST /exercises/{exerciseId}/instructions : Create a new exercise instruction
     *
     * @param exerciseId The unique identifier (required)
     * @param exerciseInstructionDTO Exercise instruction payload (optional)
     * @return The newly created exercise instruction (status code 201)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "createExerciseInstruction",
        summary = "Create a new exercise instruction",
        responses = {
            @ApiResponse(responseCode = "201", description = "The newly created exercise instruction"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exercises/{exerciseId}/instructions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createExerciseInstruction(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId,
        @Parameter(name = "ExerciseInstructionDTO", description = "Exercise instruction payload") @Valid @RequestBody(required = false) ExerciseInstructionDTO exerciseInstructionDTO
    ) {
        return getDelegate().createExerciseInstruction(exerciseId, exerciseInstructionDTO);
    }


    /**
     * DELETE /exercises/categories/{categoryId} : Delete a category by id
     *
     * @param categoryId The unique identifier (required)
     * @return Success deleting a category (status code 200)
     *         or No category found for the provided &#x60;categoryId&#x60; (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Delete a category by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success deleting a category"),
            @ApiResponse(responseCode = "404", description = "No category found for the provided `categoryId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/exercises/categories/{categoryId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteCategory(
        @Parameter(name = "categoryId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") UUID categoryId
    ) {
        return getDelegate().deleteCategory(categoryId);
    }


    /**
     * DELETE /exercises/{exerciseId} : Delete a exercise by id
     *
     * @param exerciseId The unique identifier (required)
     * @return Success deleting a exercise (status code 200)
     *         or No exercise found for the provided &#x60;exerciseId&#x60; (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "deleteExercise",
        summary = "Delete a exercise by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success deleting a exercise"),
            @ApiResponse(responseCode = "404", description = "No exercise found for the provided `exerciseId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/exercises/{exerciseId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteExercise(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId
    ) {
        return getDelegate().deleteExercise(exerciseId);
    }


    /**
     * DELETE /exercises/{exerciseId}/instructions/{instructionId} : Delete a exercise instruction by id
     *
     * @param exerciseId The unique identifier (required)
     * @param instructionId The unique identifier (required)
     * @return Success deleting a exercise instruction (status code 200)
     *         or No exercise found for the provided &#x60;exerciseId&#x60; (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "deleteExerciseInstruction",
        summary = "Delete a exercise instruction by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success deleting a exercise instruction"),
            @ApiResponse(responseCode = "404", description = "No exercise found for the provided `exerciseId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/exercises/{exerciseId}/instructions/{instructionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteExerciseInstruction(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId,
        @Parameter(name = "instructionId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("instructionId") UUID instructionId
    ) {
        return getDelegate().deleteExerciseInstruction(exerciseId, instructionId);
    }


    /**
     * GET /exercises/categories : Fetch a list of categories
     *
     * @return A list of categories (status code 200)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "getCategories",
        summary = "Fetch a list of categories",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of categories", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CategoryDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises/categories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CategoryDTO>> getCategories(
        
    ) {
        return getDelegate().getCategories();
    }


    /**
     * GET /exercises/categories/{categoryId} : Get a category by id
     *
     * @param categoryId The unique identifier (required)
     * @return A category (status code 200)
     */
    @Operation(
        operationId = "getCategory",
        summary = "Get a category by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "A category", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExerciseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises/categories/{categoryId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExerciseDTO> getCategory(
        @Parameter(name = "categoryId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") UUID categoryId
    ) {
        return getDelegate().getCategory(categoryId);
    }


    /**
     * GET /exercises/{exerciseId} : Get a exercise by id
     *
     * @param exerciseId The unique identifier (required)
     * @return A exercise (status code 200)
     */
    @Operation(
        operationId = "getExercise",
        summary = "Get a exercise by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "A exercise", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExerciseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises/{exerciseId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExerciseDTO> getExercise(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId
    ) {
        return getDelegate().getExercise(exerciseId);
    }


    /**
     * GET /exercises/{exerciseId}/instructions/{instructionId} : Get a exercise instruction by id
     *
     * @param exerciseId The unique identifier (required)
     * @param instructionId The unique identifier (required)
     * @return A exercise (status code 200)
     */
    @Operation(
        operationId = "getExerciseInstruction",
        summary = "Get a exercise instruction by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "A exercise", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExerciseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises/{exerciseId}/instructions/{instructionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExerciseDTO> getExerciseInstruction(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId,
        @Parameter(name = "instructionId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("instructionId") UUID instructionId
    ) {
        return getDelegate().getExerciseInstruction(exerciseId, instructionId);
    }


    /**
     * GET /exercises/{exerciseId}/instructions : Fetch a list of exercises
     *
     * @param exerciseId The unique identifier (required)
     * @return A list of exercises (status code 200)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "getExerciseInstructions",
        summary = "Fetch a list of exercises",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of exercises", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetExerciseInstructions200Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises/{exerciseId}/instructions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetExerciseInstructions200Response> getExerciseInstructions(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId
    ) {
        return getDelegate().getExerciseInstructions(exerciseId);
    }


    /**
     * GET /exercises/types : Fetch a list of exercise types
     *
     * @return A list of exercise types (status code 200)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "getExerciseTypes",
        summary = "Fetch a list of exercise types",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of exercise types", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ExerciseTypeDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises/types",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ExerciseTypeDTO>> getExerciseTypes(
        
    ) {
        return getDelegate().getExerciseTypes();
    }


    /**
     * GET /exercises : Fetch a list of exercises
     *
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @param limit The numbers of items to return (optional)
     * @param filterKey name of the field to filter by (optional)
     * @param filterValue value of the field to filter with (optional)
     * @param sortKey  (optional)
     * @param sortOrder  (optional)
     * @return A list of exercises (status code 200)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "getExercises",
        summary = "Fetch a list of exercises",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of exercises", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetExerciseInstructions200Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exercises",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetExerciseInstructions200Response> getExercises(
        @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "The numbers of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "filter-key", description = "name of the field to filter by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter-key", required = false) List<String> filterKey,
        @Parameter(name = "filter-value", description = "value of the field to filter with", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter-value", required = false) List<String> filterValue,
        @Parameter(name = "sort-key", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort-key", required = false) String sortKey,
        @Parameter(name = "sort-order", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort-order", required = false) SortOrderDTO sortOrder
    ) {
        return getDelegate().getExercises(offset, limit, filterKey, filterValue, sortKey, sortOrder);
    }


    /**
     * PATCH /exercises/categories/{categoryId} : Patch a category
     * Body schema should follow format RFC 6902 (application/json-patch+json)
     *
     * @param categoryId The unique identifier (required)
     * @param body  (optional)
     * @return Success patching a category (status code 200)
     *         or No category found for the provided &#x60;categoryId&#x60; (status code 404)
     *         or Conflict detected during update (status code 409)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "patchCategory",
        summary = "Patch a category",
        description = "Body schema should follow format RFC 6902 (application/json-patch+json)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success patching a category"),
            @ApiResponse(responseCode = "404", description = "No category found for the provided `categoryId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict detected during update"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/exercises/categories/{categoryId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> patchCategory(
        @Parameter(name = "categoryId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") UUID categoryId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return getDelegate().patchCategory(categoryId, body);
    }


    /**
     * PATCH /exercises/{exerciseId} : Patch a exercise
     * Body schema should follow format RFC 6902 (application/json-patch+json)
     *
     * @param exerciseId The unique identifier (required)
     * @param body  (optional)
     * @return Success patching a exercise (status code 200)
     *         or No exercise found for the provided &#x60;exerciseId&#x60; (status code 404)
     *         or Conflict detected during update (status code 409)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "patchExercise",
        summary = "Patch a exercise",
        description = "Body schema should follow format RFC 6902 (application/json-patch+json)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success patching a exercise"),
            @ApiResponse(responseCode = "404", description = "No exercise found for the provided `exerciseId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict detected during update"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/exercises/{exerciseId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> patchExercise(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return getDelegate().patchExercise(exerciseId, body);
    }


    /**
     * PATCH /exercises/{exerciseId}/instructions/{instructionId} : Patch a exercise instruction
     * Body schema should follow format RFC 6902 (application/json-patch+json)
     *
     * @param exerciseId The unique identifier (required)
     * @param instructionId The unique identifier (required)
     * @param body  (optional)
     * @return Success patching a exercise (status code 200)
     *         or No exercise found for the provided &#x60;exerciseId&#x60; (status code 404)
     *         or Conflict detected during update (status code 409)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "patchExerciseInstruction",
        summary = "Patch a exercise instruction",
        description = "Body schema should follow format RFC 6902 (application/json-patch+json)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success patching a exercise"),
            @ApiResponse(responseCode = "404", description = "No exercise found for the provided `exerciseId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict detected during update"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/exercises/{exerciseId}/instructions/{instructionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> patchExerciseInstruction(
        @Parameter(name = "exerciseId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("exerciseId") UUID exerciseId,
        @Parameter(name = "instructionId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("instructionId") UUID instructionId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return getDelegate().patchExerciseInstruction(exerciseId, instructionId, body);
    }

}
