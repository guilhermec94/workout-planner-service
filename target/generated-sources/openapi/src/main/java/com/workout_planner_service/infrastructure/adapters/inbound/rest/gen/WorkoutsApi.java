/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.workout_planner_service.infrastructure.adapters.inbound.rest.gen;

import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.ErrorDTO;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.GetWorkouts200Response;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.SortOrderDTO;
import java.util.UUID;
import com.workout_planner_service.infrastructure.adapters.inbound.rest.dtos.WorkoutDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-11T17:20:05.992941900Z[Europe/Lisbon]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "workouts", description = "the workouts API")
public interface WorkoutsApi {

    default WorkoutsApiDelegate getDelegate() {
        return new WorkoutsApiDelegate() {};
    }

    /**
     * POST /workouts : Create a new workout
     *
     * @param workoutDTO Workout payload (optional)
     * @return The newly created workout (status code 201)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "createWorkout",
        summary = "Create a new workout",
        responses = {
            @ApiResponse(responseCode = "201", description = "The newly created workout"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/workouts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createWorkout(
        @Parameter(name = "WorkoutDTO", description = "Workout payload") @Valid @RequestBody(required = false) WorkoutDTO workoutDTO
    ) {
        return getDelegate().createWorkout(workoutDTO);
    }


    /**
     * DELETE /workouts/{workoutId} : Delete a workout by id
     *
     * @param workoutId The unique identifier (required)
     * @return Success deleting a workout (status code 200)
     *         or No workout found for the provided &#x60;workoutId&#x60; (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "deleteWorkout",
        summary = "Delete a workout by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success deleting a workout"),
            @ApiResponse(responseCode = "404", description = "No workout found for the provided `workoutId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/workouts/{workoutId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteWorkout(
        @Parameter(name = "workoutId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("workoutId") UUID workoutId
    ) {
        return getDelegate().deleteWorkout(workoutId);
    }


    /**
     * GET /workouts/{workoutId} : Get a workout by id
     *
     * @param workoutId The unique identifier (required)
     * @return A workout (status code 200)
     */
    @Operation(
        operationId = "getWorkout",
        summary = "Get a workout by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "A workout", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkoutDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/workouts/{workoutId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkoutDTO> getWorkout(
        @Parameter(name = "workoutId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("workoutId") UUID workoutId
    ) {
        return getDelegate().getWorkout(workoutId);
    }


    /**
     * GET /workouts : Fetch a list of workouts
     *
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @param limit The numbers of items to return (optional)
     * @param filterKey name of the field to filter by (optional)
     * @param filterValue value of the field to filter with (optional)
     * @param sortKey  (optional)
     * @param sortOrder  (optional)
     * @return A list of workouts (status code 200)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "getWorkouts",
        summary = "Fetch a list of workouts",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of workouts", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetWorkouts200Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/workouts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetWorkouts200Response> getWorkouts(
        @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "The numbers of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "filter-key", description = "name of the field to filter by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter-key", required = false) List<String> filterKey,
        @Parameter(name = "filter-value", description = "value of the field to filter with", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter-value", required = false) List<String> filterValue,
        @Parameter(name = "sort-key", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort-key", required = false) String sortKey,
        @Parameter(name = "sort-order", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort-order", required = false) SortOrderDTO sortOrder
    ) {
        return getDelegate().getWorkouts(offset, limit, filterKey, filterValue, sortKey, sortOrder);
    }


    /**
     * PATCH /workouts/{workoutId} : Patch a workout
     * Body schema should follow format RFC 6902 (application/json-patch+json)
     *
     * @param workoutId The unique identifier (required)
     * @param body  (optional)
     * @return Success patching a workout (status code 200)
     *         or No workout found for the provided &#x60;workoutId&#x60; (status code 404)
     *         or Conflict detected during update (status code 409)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "patchWorkout",
        summary = "Patch a workout",
        description = "Body schema should follow format RFC 6902 (application/json-patch+json)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success patching a workout"),
            @ApiResponse(responseCode = "404", description = "No workout found for the provided `workoutId`", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict detected during update"),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/workouts/{workoutId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> patchWorkout(
        @Parameter(name = "workoutId", description = "The unique identifier", required = true, in = ParameterIn.PATH) @PathVariable("workoutId") UUID workoutId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return getDelegate().patchWorkout(workoutId, body);
    }

}
